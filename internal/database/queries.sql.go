// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addMovie = `-- name: AddMovie :exec
INSERT INTO movies(
    adult, backdrop_path, genre_ids, movie_id, movie_language, movie_original_title, movie_overview,
    popularity, poster_path, release_date, movie_title, video, vote_average, vote_count) 
    VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
`

type AddMovieParams struct {
	Adult              pgtype.Bool
	BackdropPath       pgtype.Text
	GenreIds           []int32
	MovieID            int32
	MovieLanguage      pgtype.Text
	MovieOriginalTitle pgtype.Text
	MovieOverview      pgtype.Text
	Popularity         pgtype.Float8
	PosterPath         pgtype.Text
	ReleaseDate        pgtype.Text
	MovieTitle         string
	Video              pgtype.Bool
	VoteAverage        pgtype.Float8
	VoteCount          pgtype.Int8
}

func (q *Queries) AddMovie(ctx context.Context, arg AddMovieParams) error {
	_, err := q.db.Exec(ctx, addMovie,
		arg.Adult,
		arg.BackdropPath,
		arg.GenreIds,
		arg.MovieID,
		arg.MovieLanguage,
		arg.MovieOriginalTitle,
		arg.MovieOverview,
		arg.Popularity,
		arg.PosterPath,
		arg.ReleaseDate,
		arg.MovieTitle,
		arg.Video,
		arg.VoteAverage,
		arg.VoteCount,
	)
	return err
}

const getMovieByDesc = `-- name: GetMovieByDesc :many
SELECT id, adult, backdrop_path, genre_ids, movie_id, movie_language, movie_original_title, movie_overview, popularity, poster_path, release_date, movie_title, video, vote_average, vote_count FROM movies WHERE LOWER(movie_overview) LIKE LOWER('%' || $1 || '%') LIMIT 5
`

func (q *Queries) GetMovieByDesc(ctx context.Context, dollar_1 pgtype.Text) ([]Movie, error) {
	rows, err := q.db.Query(ctx, getMovieByDesc, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Adult,
			&i.BackdropPath,
			&i.GenreIds,
			&i.MovieID,
			&i.MovieLanguage,
			&i.MovieOriginalTitle,
			&i.MovieOverview,
			&i.Popularity,
			&i.PosterPath,
			&i.ReleaseDate,
			&i.MovieTitle,
			&i.Video,
			&i.VoteAverage,
			&i.VoteCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovieByTitle = `-- name: GetMovieByTitle :many
SELECT id, adult, backdrop_path, genre_ids, movie_id, movie_language, movie_original_title, movie_overview, popularity, poster_path, release_date, movie_title, video, vote_average, vote_count FROM movies WHERE LOWER(movie_title) LIKE LOWER('%' || $1 || '%') LIMIT 5
`

func (q *Queries) GetMovieByTitle(ctx context.Context, dollar_1 pgtype.Text) ([]Movie, error) {
	rows, err := q.db.Query(ctx, getMovieByTitle, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Adult,
			&i.BackdropPath,
			&i.GenreIds,
			&i.MovieID,
			&i.MovieLanguage,
			&i.MovieOriginalTitle,
			&i.MovieOverview,
			&i.Popularity,
			&i.PosterPath,
			&i.ReleaseDate,
			&i.MovieTitle,
			&i.Video,
			&i.VoteAverage,
			&i.VoteCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovieByTitleAndDesc = `-- name: GetMovieByTitleAndDesc :many
SELECT id, adult, backdrop_path, genre_ids, movie_id, movie_language, movie_original_title, movie_overview, popularity, poster_path, release_date, movie_title, video, vote_average, vote_count FROM movies WHERE LOWER(movie_title) LIKE LOWER('%' || $1 || '%') AND LOWER(movie_overview) LIKE LOWER('%' || $2 || '%') LIMIT 5
`

type GetMovieByTitleAndDescParams struct {
	Column1 pgtype.Text
	Column2 pgtype.Text
}

func (q *Queries) GetMovieByTitleAndDesc(ctx context.Context, arg GetMovieByTitleAndDescParams) ([]Movie, error) {
	rows, err := q.db.Query(ctx, getMovieByTitleAndDesc, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Adult,
			&i.BackdropPath,
			&i.GenreIds,
			&i.MovieID,
			&i.MovieLanguage,
			&i.MovieOriginalTitle,
			&i.MovieOverview,
			&i.Popularity,
			&i.PosterPath,
			&i.ReleaseDate,
			&i.MovieTitle,
			&i.Video,
			&i.VoteAverage,
			&i.VoteCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
